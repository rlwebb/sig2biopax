/* Generated By:JavaCC: Do not edit this line. UQLParser.java */
package javacc;

import java.io.StringReader;
import java.io.Reader;
import java.io.File;
import java.lang.String;
import java.io.BufferedReader;
import java.io.FileReader;

public class UQLParser implements UQLParserConstants {
    public static String SourceName;
    public static String SourceHumanAccession;
    public static String SourceMouseAccession;
    public static String SourceType;
    public static String SourceLocation;
    public static String TargetName;
    public static String TargetHumanAccession;
    public static String TargetMouseAccession;
    public static String TargetType;
    public static String TargetLocation;
    public static String Effect;
    public static String TypeofInteraction;
    public static String PubMedID;

        public static Boolean exprIsTrue = false;
        public static String Decision = "";

        public static String text;
        public static File file;

   public UQLParser(String s)
    {
        this((Reader)(new StringReader(s)));
        //	file = f;
    }
        public static void main(String args[])
    {
        programCode.Line.FakeLine();
        File f1 = new File("input.txt");
        checkLine(f1);
        System.out.print(Decision);
    }

    private static void loadLine ()
        {
                SourceName = programCode.Line.SourceName;
                SourceHumanAccession = programCode.Line.SourceHumanAccession;
                SourceMouseAccession = programCode.Line.SourceMouseAccession;
                SourceType = programCode.Line.SourceType;
                SourceLocation = programCode.Line.SourceLocation;
                TargetName = programCode.Line.TargetName;
                TargetHumanAccession = programCode.Line.TargetHumanAccession;
                TargetMouseAccession = programCode.Line.TargetMouseAccession;
                TargetType = programCode.Line.TargetType;
                TargetLocation = programCode.Line.TargetLocation;
                Effect = programCode.Line.Effect;
                TypeofInteraction = programCode.Line.TypeofInteraction;
                PubMedID = programCode.Line.PubMedID;
        }
    public static String checkLine(File f)
    {
        try
        {
                                loadLine();
                                FileReader file = new FileReader(f);
                                BufferedReader fileInput = new BufferedReader(file);


                 String query = "";
                 String finalDecision = "";
                 UQLParser parser = new UQLParser(query);
                 while ((query = fileInput.readLine())!= null)
                                 {
                                                parser = new UQLParser(query);
                                                parser.parse();
                                                if (parser.Decision!="") finalDecision=parser.Decision;

                                }
                return finalDecision;
                }
        catch(Exception e)
        {
                e.printStackTrace();
        }
                return "";
    }

/** 
 *  Top level
 */
  final public void parse() throws ParseException {
        Token tlocalStr;
        Boolean expressionResult = false;
    expressionResult = expression();
    jj_consume_token(THEN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      tlocalStr = jj_consume_token(STRING);
      break;
    case QUOTED_STRING:
      tlocalStr = jj_consume_token(QUOTED_STRING);
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(0);
                                                                                                                                 if (expressionResult==true)
                                                                                                                                        {
                                                                                                                                                Decision=tlocalStr.image;
                                                                                                                                        }
                                                                                                                                else Decision="";
  }

/**
 * An expression is defined to be a queryTerm followed by zero or more
 * query terms joined by either an AND or an OR.   If two query terms are joined with 
 * AND then both conditions must be met.  If two query terms are joined with an OR, then
 * one of the two conditions must be met.  
 */
  final public Boolean expression() throws ParseException {
  Boolean pass=false;
  Boolean pass2=false;
  Boolean totalFail = false;
  Boolean oneAndTrue = false;
  Boolean oneOrTrue = false;
  Boolean and=false;
  Boolean or=false;
  Boolean hasSecond = false;
  Boolean isLastExprSetTrue = false;
    pass = queryTerm();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
      case OR:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        jj_consume_token(AND);
                       and=true;
        break;
      case OR:
        jj_consume_token(OR);
                                          or=true;
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      pass2 = queryTerm();
                                                                                hasSecond = true;
                                                                                if (and==true)
                                                                                {
                                                                                        and = false;

                                                                                        if (pass==true && pass2==true)
                                                                                                {
                                                                                                        isLastExprSetTrue=true;
                                                                                                }
                                                                                        else isLastExprSetTrue = false;
                                                                                }
                                                                                else if (or==true)
                                                                                {
                                                                                        or = false; //reset
                                                                                        if (pass==true || pass2==true)
                                                                                        {
                                                                                                isLastExprSetTrue = true;
                                                                                        }
                                                                                        else isLastExprSetTrue = false;
                                                                                }
                                                                                pass = isLastExprSetTrue;
    }
                                if (hasSecond==false) {if (true) return pass;}
                                else {if (true) return isLastExprSetTrue;}
    throw new Error("Missing return statement in function");
  }

/**
 * Query terms may consist of a parenthetically separated expression or
 * may be a query criteria of the form queryName = something or queryName <> something.
 *
 */
  final public Boolean queryTerm() throws ParseException {
        Boolean sn = false;
        Boolean sha = false;
        Boolean st = false;
        Boolean sl = false;
        Boolean tn = false;
        Boolean tha = false;
        Boolean tt = false;
        Boolean tl = false;
        Boolean e = false;
        Boolean toi = false;
        Boolean pid = false;
        Boolean equals = false;
        Boolean notequal = false;
        Boolean contains = false;
        Token tcompareStr;
        String scompareStr = "";
        String str, quot_str;
        Boolean pass=false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SN:
    case SHA:
    case ST:
    case SL:
    case TN:
    case THA:
    case TT:
    case TL:
    case E:
    case TOI:
    case PID:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SN:
        jj_consume_token(SN);
                sn = true;
        break;
      case SHA:
        jj_consume_token(SHA);
                                     sha = true;
        break;
      case ST:
        jj_consume_token(ST);
                                                         st = true;
        break;
      case SL:
        jj_consume_token(SL);
                                                                            sl = true;
        break;
      case TN:
        jj_consume_token(TN);
                                                                                                tn = true;
        break;
      case THA:
        jj_consume_token(THA);
                                                                                                                    tha = true;
        break;
      case TT:
        jj_consume_token(TT);
                                                                                                                                         tt = true;
        break;
      case TL:
        jj_consume_token(TL);
                                                                                                                                                             tl = true;
        break;
      case E:
        jj_consume_token(E);
                                                                                                                                                                                e = true;
        break;
      case TOI:
        jj_consume_token(TOI);
                                                                                                                                                                                                    toi = true;
        break;
      case PID:
        jj_consume_token(PID);
                                                                                                                                                                                                                          pid = true;
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUALS:
        jj_consume_token(EQUALS);
                    equals=true;
        break;
      case NOTEQUAL:
        jj_consume_token(NOTEQUAL);
                                                notequal=true;
        break;
      case CONTAINS:
        jj_consume_token(CONTAINS);
                                                                              contains=true;
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
        tcompareStr = jj_consume_token(STRING);
                                scompareStr=tcompareStr.image;
        break;
      case QUOTED_STRING:
        tcompareStr = jj_consume_token(QUOTED_STRING);
                                                                                               scompareStr= tcompareStr.image.substring(1,tcompareStr.image.length() - 1);
        break;
      case EMPTY_STRING:
        tcompareStr = jj_consume_token(EMPTY_STRING);
                                                                                                                                                                                                          scompareStr="";
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                                if (sn == true)
                                                                        {
                                                                                if (equals==true)
                                                                                {
                                                                                        if (SourceName.toLowerCase().equals(scompareStr.toLowerCase())) {pass=true;}
                                                                                }
                                                                                else if (notequal==true)
                                                                                {
                                                                                        if (!(SourceName.toLowerCase().equals(scompareStr.toLowerCase()))) {pass=true;}
                                                                                }
                                                                                else if (contains==true)
                                                                                {
                                                                                        if (SourceName.toLowerCase().contains(scompareStr.toLowerCase())) {pass=true;}
                                                                                }
                                                                        }
                                                                if (sha == true)
                                                                        {
                                                                                if (equals==true)
                                                                                {
                                                                                        if (SourceHumanAccession.toLowerCase().equals(scompareStr.toLowerCase())) {pass=true;}
                                                                                }
                                                                                else if (notequal==true)
                                                                                {
                                                                                        if (!(SourceHumanAccession.toLowerCase().equals(scompareStr.toLowerCase()))) {pass=true;}
                                                                                }
                                                                                else if (contains==true)
                                                                                {
                                                                                        if (SourceHumanAccession.toLowerCase().contains(scompareStr.toLowerCase())) {pass=true;}
                                                                                }
                                                                        }
                                                                if (st == true)
                                                                        {
                                                                                if (equals==true)
                                                                                {
                                                                                        if (SourceType.toLowerCase().equals(scompareStr.toLowerCase())) {pass=true;}
                                                                                }
                                                                                else if (notequal==true)
                                                                                {
                                                                                        if (!(SourceType.toLowerCase().equals(scompareStr.toLowerCase()))) {pass=true;}
                                                                                }
                                                                                else if (contains==true)
                                                                                {
                                                                                        if (SourceType.toLowerCase().contains(scompareStr.toLowerCase())) {pass=true;}
                                                                                }
                                                                        }
                                                                if (sl == true)
                                                                        {
                                                                                if (equals==true)
                                                                                {
                                                                                        if (SourceLocation.toLowerCase().equals(scompareStr.toLowerCase())) {pass=true;}
                                                                                }
                                                                                else if (notequal==true)
                                                                                {
                                                                                        if (!(SourceLocation.toLowerCase().equals(scompareStr.toLowerCase()))) {pass=true;}
                                                                                }
                                                                                else if (contains==true)
                                                                                {
                                                                                        if (SourceLocation.toLowerCase().contains(scompareStr.toLowerCase())) {pass=true;}
                                                                                }
                                                                        }
                                                                if (tn == true)
                                                                        {
                                                                                if (equals==true)
                                                                                {
                                                                                        if (TargetName.toLowerCase().equals(scompareStr.toLowerCase())) {pass=true;}
                                                                                }
                                                                                else if (notequal==true)
                                                                                {
                                                                                        if (!(TargetName.toLowerCase().equals(scompareStr.toLowerCase()))) {pass=true;}
                                                                                }
                                                                                else if (contains==true)
                                                                                {
                                                                                        if (TargetName.toLowerCase().contains(scompareStr.toLowerCase())) {pass=true;}
                                                                                }
                                                                        }
                                                                if (tha == true)
                                                                        {
                                                                                if (equals==true)
                                                                                {
                                                                                        if (TargetHumanAccession.toLowerCase().equals(scompareStr.toLowerCase())) {pass=true;}
                                                                                }
                                                                                else if (notequal==true)
                                                                                {
                                                                                        if (!(TargetHumanAccession.toLowerCase().equals(scompareStr.toLowerCase()))) {pass=true;}
                                                                                }
                                                                                else if (contains==true)
                                                                                {
                                                                                        if (TargetHumanAccession.toLowerCase().contains(scompareStr.toLowerCase())) {pass=true;}
                                                                                }
                                                                        }
                                                                if (tt == true)
                                                                        {
                                                                                if (equals==true)
                                                                                {
                                                                                        if (TargetType.toLowerCase().equals(scompareStr.toLowerCase())) {pass=true;}
                                                                                }
                                                                                else if (notequal==true)
                                                                                {
                                                                                        if (!(TargetType.toLowerCase().equals(scompareStr.toLowerCase()))) {pass=true;}
                                                                                }
                                                                                else if (contains==true)
                                                                                {
                                                                                        if (TargetType.toLowerCase().contains(scompareStr.toLowerCase())) {pass=true;}
                                                                                }
                                                                        }
                                                                if (tl == true)
                                                                        {
                                                                                if (equals==true)
                                                                                {
                                                                                        if (TargetLocation.toLowerCase().equals(scompareStr.toLowerCase())) {pass=true;}
                                                                                }
                                                                                else if (notequal==true)
                                                                                {
                                                                                        if (!(TargetLocation.toLowerCase().equals(scompareStr.toLowerCase()))) {pass=true;}
                                                                                }
                                                                                else if (contains==true)
                                                                                {
                                                                                        if (TargetLocation.toLowerCase().contains(scompareStr.toLowerCase())) {pass=true;}
                                                                                }
                                                                        }
                                                                if (e == true)
                                                                        {
                                                                                if (equals==true)
                                                                                {
                                                                                        if (Effect.toLowerCase().equals(scompareStr.toLowerCase())) {pass=true;}
                                                                                }
                                                                                else if (notequal==true)
                                                                                {
                                                                                        if (!(Effect.toLowerCase().equals(scompareStr.toLowerCase()))) {pass=true;}
                                                                                }
                                                                                else if (contains==true)
                                                                                {
                                                                                        if (Effect.toLowerCase().contains(scompareStr.toLowerCase())) {pass=true;}
                                                                                }
                                                                        }
                                                                if (toi == true)
                                                                        {
                                                                                if (equals==true)
                                                                                {
                                                                                        if (TypeofInteraction.toLowerCase().equals(scompareStr.toLowerCase())) {pass=true;}
                                                                                }
                                                                                else if (notequal==true)
                                                                                {
                                                                                        if (!(TypeofInteraction.toLowerCase().equals(scompareStr.toLowerCase()))) {pass=true;}
                                                                                }
                                                                                else if (contains==true)
                                                                                {
                                                                                        if (TypeofInteraction.toLowerCase().contains(scompareStr.toLowerCase())) {pass=true;}
                                                                                }
                                                                        }
                                                                if (pid == true)
                                                                        {
                                                                                if (equals==true)
                                                                                {
                                                                                        if (PubMedID.toLowerCase().equals(scompareStr.toLowerCase())) {pass=true;}
                                                                                }
                                                                                else if (notequal==true)
                                                                                {
                                                                                        if (!(PubMedID.toLowerCase().equals(scompareStr.toLowerCase()))) {pass=true;}
                                                                                }
                                                                                else if (contains==true)
                                                                                {
                                                                                        if (PubMedID.toLowerCase().contains(scompareStr.toLowerCase())) {pass=true;}
                                                                                }
                                                                        }
                                                                {if (true) return pass;}
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      pass = expression();
      jj_consume_token(RPAREN);
                                                   {if (true) return pass;}
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public UQLParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[7];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xc000000,0x60,0x60,0x7df80,0xe00000,0x1c000000,0xfdf80,};
   }

  /** Constructor with InputStream. */
  public UQLParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public UQLParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new UQLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public UQLParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new UQLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public UQLParser(UQLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(UQLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[29];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 7; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 29; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
